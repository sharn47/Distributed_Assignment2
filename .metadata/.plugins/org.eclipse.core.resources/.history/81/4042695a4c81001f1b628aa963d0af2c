package com.weather.app;
import java.io.*;
import java.net.*;
import java.util.*;

public class GETClient {
    private static LamportClock lamportClock = new LamportClock();

    public static void main(String[] args) {
        if (args.length < 1) {
            System.out.println("Usage: java GETClient <server_url>");
            return;
        }

        String serverUrl = args[0];
        try {
            lamportClock.tick();
            URL url = new URL(serverUrl);
            Socket socket = new Socket(url.getHost(), url.getPort());

            BufferedWriter out = new BufferedWriter(
                    new OutputStreamWriter(socket.getOutputStream()));
            BufferedReader in = new BufferedReader(
                    new InputStreamReader(socket.getInputStream()));

            // Send GET request
            out.write("GET /weather HTTP/1.1\r\n");
            out.write("Host: " + url.getHost() + "\r\n");
            out.write("Lamport-Time: " + lamportClock.getTime() + "\r\n");
            out.write("\r\n");
            out.flush();

            // Read response status line
            String statusLine = in.readLine();
            if (statusLine == null) return;

            // Read headers
            Map<String, String> headers = new HashMap<>();
            String line;
            while (!(line = in.readLine()).equals("")) {
                String[] header = line.split(": ");
                headers.put(header[0], header[1]);
            }

            // Update Lamport clock
            int serverLamportTime = Integer.parseInt(headers.getOrDefault("Lamport-Time", "0"));
            lamportClock.update(serverLamportTime);

            // Read body
            int contentLength = Integer.parseInt(headers.get("Content-Length"));
            char[] bodyChars = new char[contentLength];
            in.read(bodyChars);
            String body = new String(bodyChars);

            // Parse and display data
            parseAndDisplay(body);

            socket.close();

        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    private static void parseAndDisplay(String jsonString) {
        jsonString = jsonString.trim();
        if (jsonString.startsWith("{") && jsonString.endsWith("}")) {
            jsonString = jsonString.substring(1, jsonString.length() - 1);
            String[] keyValuePairs = jsonString.split(",");
            for (String pair : keyValuePairs) {
                String[] kv = pair.split(":");
                String key = kv[0].replace("\"", "").trim();
                String value = kv[1].replace("\"", "").trim();
                System.out.println(key + ": " + value);
            }
        } else {
            System.out.println("Invalid JSON data");
        }
    }
}
