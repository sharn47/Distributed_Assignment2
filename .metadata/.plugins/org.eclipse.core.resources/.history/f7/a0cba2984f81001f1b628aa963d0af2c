package com.weather.app;
import com.google.gson.*;
import java.io.*;
import java.net.*;
import java.util.*;

public class GETClient {
    private static LamportClock lamportClock = new LamportClock();

    public static void main(String[] args) {
        if (args.length < 1) {
            System.out.println("Usage: java GETClient <server_url>");
            return;
        }

        String serverUrl = args[0];
        try {
            lamportClock.tick();
            URL url = new URL(serverUrl);
            Socket socket = new Socket(url.getHost(), url.getPort());

            BufferedWriter out = new BufferedWriter(
                    new OutputStreamWriter(socket.getOutputStream()));
            BufferedReader in = new BufferedReader(
                    new InputStreamReader(socket.getInputStream()));

            // Send GET request
            out.write("GET / HTTP/1.1\r\n");
            out.write("Host: " + url.getHost() + "\r\n");
            out.write("Lamport-Clock: " + lamportClock.getClock() + "\r\n");
            out.write("\r\n");
            out.flush();

            // Read response status line
            String statusLine = in.readLine();
            if (statusLine == null) return;
            System.out.println("Response: " + statusLine);

            // Read headers
            Map<String, String> headers = new HashMap<>();
            String line;
            int contentLength = 0;
            while (!(line = in.readLine()).equals("")) {
                String[] header = line.split(": ");
                headers.put(header[0], header[1]);
                if (header[0].equalsIgnoreCase("Content-Length")) {
                    contentLength = Integer.parseInt(header[1]);
                }
            }

            // Update Lamport clock
            int serverLamportClock = Integer.parseInt(headers.getOrDefault("Lamport-Clock", "0"));
            lamportClock.update(serverLamportClock);

            // Read body
            char[] bodyChars = new char[contentLength];
            in.read(bodyChars);
            String body = new String(bodyChars);

            // Parse and display data
            parseAndDisplay(body);

            socket.close();

        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    private static void parseAndDisplay(String jsonString) {
        Gson gson = new Gson();
        JsonArray jsonArray = JsonParser.parseString(jsonString).getAsJsonArray();

        for (JsonElement element : jsonArray) {
            JsonObject jsonObject = element.getAsJsonObject();
            System.out.println("Weather Data Entry:");
            for (Map.Entry<String, JsonElement> entry : jsonObject.entrySet()) {
                System.out.println(entry.getKey() + ": " + entry.getValue().getAsString());
            }
            System.out.println("-----");
        }
    }
}
