import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

public class LamportClockTest {

    @Test
    public void testTick() {
        LamportClock clock = new LamportClock();
        int initial = clock.getClock();
        clock.tick();
        assertEquals(initial + 1, clock.getClock());
    }

    @Test
    public void testUpdate() {
        LamportClock clock = new LamportClock();
        clock.update(10);
        assertEquals(11, clock.getClock());

        clock.update(15);
        assertEquals(16, clock.getClock());
    }

    @Test
    public void testConcurrentUpdate() throws InterruptedException {
        LamportClock clock = new LamportClock();
        Thread thread1 = new Thread(clock::tick);
        Thread thread2 = new Thread(() -> clock.update(5));

        thread1.start();
        thread2.start();

        thread1.join();
        thread2.join();

        assertTrue(clock.getClock() >= 6); // Clock should be at least 6 due to concurrent updates
    }
}
